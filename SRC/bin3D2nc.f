c-----------------------------------------------------------------------
c
c This program rewrite the compressed *.tar file with 3D fields
c generated by the model into the NetCDF file.
c
c (C) 1999 Marat Khairoutdinov
c
c  Modifications to use COARDS conventions.
c  Dave Schanen, UW-Milwaukee, Feb 2007.
c-----------------------------------------------------------------------
        program bin3D2nc

        implicit none

        include 'netcdf.inc'

c-----------------------------------------------------------------------
c variables:

        character(80) filename,long_name
        character(10) units
        character(8)  name
        character(1)  blank

        real(4), allocatable :: byte(:)
        real(4), allocatable ::  fld(:)
        real(4) fmax,fmin
        real(4) dx,dy,z(500),p(500),x(100000),y(100000),time

        ! Added for COARDS
        real(4), allocatable, dimension(:) :: x_in_deg, y_in_deg

        integer nsubs,nsubsx,nsubsy,nx,ny,nz,nfields
        integer i,j,k,k1,k2,n,i0,j0,nx_gl,ny_gl,count,ifields

        integer vdimids(4), start(4), ndimids
        integer ncid,err,zid,yid,xid,timeid,varid

c External functions:

        integer iargc,strlen1
        external iargc,strlen1

        real, external :: m2deglat, m2deglon

        real fldmin, fldmax


c-----------------------------------------------------------------------

c
c Read the file-name from the comman line:
c
        i=COMMAND_ARGUMENT_COUNT()
        if(i.eq.0) then
          print*,'no input-file name is specified.'
          print*,'Format: bin3D2nc input.bin3D'
          stop
        end if
        call getarg(1,filename)
        print*,filename
c---------------------------------------------------------------
c Read files; merge data from different subdomains;
c save as a netcdf file.
c
        open(1,file=filename,status='old',form='unformatted')
        read(1) nx,ny,nz,nsubs,nsubsx,nsubsy,nfields
        print*, nx,ny,nz,nsubs,nsubsx,nsubsy,nfields
        do k=1,nz
          read(1) z(k)
        end do
        do k=1,nz
          read(1) p(k)
        end do
        read(1) dx
        read(1) dy
        read(1) time

        print*,'nx,ny,nz,nsubs,nsubsx,nsubsy,nfields:'
        print*,nx,ny,nz,nsubs,nsubsx,nsubsy,nfields
        
        nx_gl=nx*nsubsx
        ny_gl=ny*nsubsy
        print*,'nx_gl=',nx_gl
        print*,'ny_gl=',ny_gl

        do i=1,nx_gl
         x(i) = dx*(i-1)
        end do
        do j=1,ny_gl
         y(j) = dy*(j-1)
        end do

        allocate (byte(nx*ny*nz))
        allocate (fld(nx_gl*ny_gl*nz))

c
c The output filename:
c

        do i=1,76
          if(filename(i:i+5).eq.'.bin3D') then
            filename(i:i+5)='.nc   '
            EXIT
          else if(i.eq.76) then
            print*,'wrong filename extension!'
            stop
          endif
        end do

c
c Initialize netcdf stuff, define variables,etc.
c
        err = NF_CREATE(filename, NF_CLOBBER, ncid)
        err = NF_REDEF(ncid)

        err = NF_DEF_DIM(ncid, 'x', nx_gl, xid)
        if(ny_gl.ne.1)err = NF_DEF_DIM(ncid, 'y', ny_gl, yid)
        err = NF_DEF_DIM(ncid, 'z', nz, zid)
        err = NF_DEF_DIM(ncid, 'time', NF_UNLIMITED, timeid)

        err = NF_DEF_VAR(ncid, 'x', NF_FLOAT, 1, xid, varid)
        err = NF_PUT_ATT_TEXT(ncid,varid,'cartesian_axis',1,'X') ! COARDS
c       err = NF_PUT_ATT_TEXT(ncid,varid,'units',1,'m') ! COARDS
        err = NF_PUT_ATT_TEXT(ncid,varid,'units',9,'degrees_E') ! COARDS
        if(ny_gl.ne.1) then
         err = NF_DEF_VAR(ncid, 'y', NF_FLOAT, 1, yid, varid)
         err = NF_PUT_ATT_TEXT(ncid,varid,'cartesian_axis',1,'Y') ! COARDS
c        err = NF_PUT_ATT_TEXT(ncid,varid,'units',1,'m') ! COARDS
         err = NF_PUT_ATT_TEXT(ncid,varid,'units',9,'degrees_N') ! COARDS
        endif
        err = NF_DEF_VAR(ncid, 'z', NF_FLOAT, 1, zid, varid)
        err = NF_PUT_ATT_TEXT(ncid,varid,'cartesian_axis',1,'Z') ! COARDS
        err = NF_PUT_ATT_TEXT(ncid,varid,'units',1,'m')
        err = NF_PUT_ATT_TEXT(ncid,varid,'long_name',6,'height')
        err = NF_DEF_VAR(ncid, 'time', NF_FLOAT, 1, timeid, varid)
        err = NF_PUT_ATT_TEXT(ncid,varid,'cartesian_axis',1,'T') ! COARDS
        err = NF_PUT_ATT_TEXT(ncid,varid,'units',4,'days')
        err = NF_PUT_ATT_TEXT(ncid,varid,'long_name',4,'time')
        err = NF_DEF_VAR(ncid, 'p', NF_FLOAT, 1, zid,varid)
        err = NF_PUT_ATT_TEXT(ncid,varid,'units',2,'mb')
        err = NF_PUT_ATT_TEXT(ncid,varid,'long_name',8,'pressure')

        err = NF_ENDDEF(ncid)

        err = NF_INQ_VARID(ncid,'x',varid)
c---> COARDS
        allocate( x_in_deg(nx_gl), stat=err )
        if ( err /= 0 ) stop "allocate failed"
        do k = 1, nx_gl
          x_in_deg(k) = m2deglat( x(k) )
        end do
        err = NF_PUT_VAR_REAL( ncid, varid, x_in_deg )
c---> end COARDS
c       err = NF_PUT_VAR_REAL(ncid, varid, x)
        if(ny_gl.ne.1) then
          err = NF_INQ_VARID(ncid,'y',varid)
c---> COARDS
          allocate( y_in_deg(ny_gl), stat=err )
          if ( err /= 0 ) stop "allocate failed"
          do k = 1, ny_gl
            y_in_deg(k) = m2deglat( y(k) )
          end do
          err = NF_PUT_VAR_REAL( ncid, varid, y_in_deg )

          err = NF_PUT_VAR_REAL(ncid, varid, y_in_deg)
c---> end COARDS
c         err = NF_PUT_VAR_REAL(ncid, varid, y)
        endif
        err = NF_INQ_VARID(ncid,'z',varid)
        err = NF_PUT_VAR_REAL(ncid, varid, z)
        err = NF_INQ_VARID(ncid,'time',varid)
        err = NF_PUT_VAR1_REAL(ncid, varid, 1, time)
        err = NF_INQ_VARID(ncid,'p',varid)
        err = NF_PUT_VAR_REAL(ncid, varid, p)

        if(ny_gl.ne.1) then
         ndimids=4
         vdimids(1) = xid
         vdimids(2) = yid
         vdimids(3) = zid
         vdimids(4) = timeid
        else
         ndimids=3
         vdimids(1) = xid
         vdimids(2) = zid
         vdimids(3) = timeid
        endif
        
        ifields=0

        do while(ifields.lt.nfields)
        
          read(1) name,blank,long_name,blank,units
          print*,long_name,units
          do n=0,nsubs-1
                 read(1) (byte(k),k=1,nx*ny*nz)
            print*,n
            j0 = n/nsubsx 
            i0 = n - j0*nsubsx        
            i0 = i0 * (nx_gl/nsubsx) 
            j0 = j0 * (ny_gl/nsubsy)  
            count=0
            do k=1,nz
             do j=1+j0,ny+j0
              do i=1+i0,nx+i0
                count=count+1
                fld(i+nx_gl*(j-1)+nx_gl*ny_gl*(k-1))=byte(count)
              end do
             end do
            end do
          end do ! n

          fldmin=1.e20
          fldmax=-1.e20
          do k=1,nz
           do j=1,ny_gl
            do i=1,nx_gl
                fldmin=min(fldmin,fld(i+nx_gl*(j-1)+nx_gl*ny_gl*(k-1)))
                fldmax=max(fldmax,fld(i+nx_gl*(j-1)+nx_gl*ny_gl*(k-1)))
            end do
           end do
          end do
          print*,fldmax,fldmin


          ifields=ifields+1

          err = NF_REDEF(ncid)
          err = NF_DEF_VAR(ncid,name, NF_FLOAT, ndimids, vdimids, varid)
          err = NF_PUT_ATT_TEXT(ncid,varid,'long_name',
     &               strlen1(long_name),long_name(1:strlen1(long_name)))
          err = NF_PUT_ATT_TEXT(ncid,varid,'units',
     &                strlen1(units),units(1:strlen1(units)))
          err = NF_ENDDEF(ncid)
          err = NF_PUT_VAR_REAL(ncid, varid, fld)


        end do ! while


        err = NF_CLOSE(ncid)

        end program bin3D2nc

c-----------------------------------------------------------------------
c functions m2deglat, m2deglon
c
c Description: Assuming we're on Earth and at lat/long (0,0), takes the 
c number of x points and number of y points file and determine the
c approximate degrees N and degrees E of each point.

c We also assume the the grid is aligned N/S E/W and (1,1) is the
c southwest corner of the grid for simplicity.

c-----------------------------------------------------------------------
        function m2deglat( in_meters ) result ( deg_N )
        implicit none

        real, parameter :: circum = 40000800. ! Approx. circum N/S [m]

        real, intent(in) :: in_meters

        real :: deg_N

        deg_N = ( in_meters * 360.0 )/ circum

        return
        end function m2deglat
c-----------------------------------------------------------------------
        function m2deglon( in_meters ) result( deg_E )
        implicit none

        real, parameter :: circum = 40075160. ! approx. circum E/W [m]

        real, intent(in) :: in_meters

        real :: deg_E

        deg_E = ( in_meters * 360.0 )/ circum
        
        return
        end function m2deglon

c-----------------------------------------------------------------------
        integer function strlen1(str)

c-----------------------------------------------------------------------
        character*(*) str
        strlen1=len(str)
        do i=1,len(str)
          if(str(i:i).ne.' ') then
            strlen1=strlen1-i+1
            return
          endif 
        end do
        return
        end function strlen1
